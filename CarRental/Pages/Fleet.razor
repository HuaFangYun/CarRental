@page "/fleet"
@using CarRentalLogic.Classes;
@using CarRentalCommon.Classes
@using CarRentalCommon.Interfaces;
@using CarRentalCommon.Enums;
@using System.Linq;
@using System.Text.RegularExpressions;
@inject Services services

<PageTitle>Fleet</PageTitle>
<Alert Message="@errorMessage" OnClose="CloseAlert" />

<div class="container-fluid p-5">
    <div class="row mb-5">
        <h3 class="text-center mb-0"><img src="images/logo-white.png" class="w-25" /></h3>
        <h2 class="text-center text-muted fst-italic fw-light">A Collection of Classics</h2>
    </div>
    <div class="row border-bottom border-dark h-100 pb-5">

        <!-- Vehicle Information Column -->
        <div class="col-3 d-flex flex-column mt-auto h-100">
            <table class="table table-borderless m-0">
                <tbody>
                    <tr>
                        <td colspan="2" class="fw-bold border-bottom h4">Vehicle Details</td>
                    </tr>
                    <tr>
                        <td class="col-3 fw-bold font-monospace">Reg. No:</td>
                        <td class="col-9">@currentVehicle.RegNo</td>
                    </tr>
                    <tr>
                        <td class="col-3 fw-bold font-monospace">Type:</td>
                        <td class="col-9">@currentVehicle.VehicleType</td>
                    </tr>
                    <tr>
                        <td class="col-3 fw-bold font-monospace">Make:</td>
                        <td class="col-9">@currentVehicle.Make</td>
                    </tr>
                    <tr>
                        <td colspan="2" class="fw-bold border-bottom h4 pt-4">Rental Information</td>
                    </tr>
                    <tr>
                        <td class="col-3 fw-bold font-monospace">Odometer:</td>
                        <td class="col-9">@currentVehicle.Odometer km</td>
                    </tr>
                    <tr>
                        <td class="col-3 fw-bold font-monospace">
                            @if (currentVehicle is ICar car)
                            {
                                <span>Doors</span>
                            }
                            else if (currentVehicle is IMotorcycle mc)
                            {
                                <span>Seats</span>
                            }
                        </td>
                        <td class="col-9">
                            @if (currentVehicle is ICar cars)
                            {
                                @cars.Doors.ToString()
                            }
                            else if (currentVehicle is IMotorcycle mcs)
                            {
                                @mcs.Seats.ToString()
                            }
                        </td>
                    </tr>
                    <tr>
                        <td class="col-3 fw-bold font-monospace">Cost/km:</td>
                        <td class="col-9 font-monospace">@currentVehicle.CostKm €</td>
                    </tr>
                    <tr>
                        <td class="col-3 fw-bold font-monospace">Cost/day:</td>
                        <td class="col-9">@currentVehicle.CostDay €</td>
                    </tr>
                    <tr>
                        <td class="col-3 fw-bold font-monospace">Status:</td>
                        <td class="col-9">
                            <span class="@((services.BookingStatus(currentVehicle.RegNo) == VehicleStatus.Available) ? "bi-circle-fill text-success" : "bi-circle-fill text-danger")">
                            </span>
                            <span class="text-uppercase">
                                @(services.BookingStatus(currentVehicle.RegNo) == VehicleStatus.Available ? " Available" : " Booked")
                            </span>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>

        <!-- Vehicle Image Column -->
        <div class="col-6 mt-auto h-100 text-center">
            <h3 class="fw-bold">@currentVehicle.Make</h3>
            <h6 class="font-monospace">@currentVehicle.Year</h6>
            <img src="@($"/images/vehicles/{currentVehicle.RegNo}.png")" alt="Image of @currentVehicle.RegNo" class="img-fluid w-100" />
            <p class="text-start bi-dash-lg"></p>
            <h6 class="text-start text-muted font-monospace">@currentVehicle.Info</h6>
        </div>

        <!-- Vehicle Selection Column -->
        <div class="col-3 mt-auto h-100">
            <h4 class="fw-bold mt-5 border-bottom pb-2">Select a Model</h4>
            <div class="font-monospace">
                @foreach (var vehicle in vehicles)
                {
                    <button type="button"
                            class="btn btn-sm @(vehicle.RegNo == currentVehicle.RegNo ? "btn-dark" : "btn-outline-secondary border-0") d-flex align-items-center w-100 p-2 my-1"
                    @onclick="() => SetCurrentVehicle(vehicle)">
                        <span class="@((services.BookingStatus(vehicle.RegNo) == VehicleStatus.Available) ? "bi-circle-fill text-success" : "bi-circle-fill text-danger") me-2">
                        </span>
                        @vehicle.Make
                    </button>
                }
            </div>
            <h4 class="fw-bold pt-4 border-bottom  pb-2">Rent Now</h4>
            <div class="font-monospace">
                <div class="">
                    <NavLink class="btn btn-sm btn-dark" href="contact">
                        Inqueries
                    </NavLink>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid p-5 pt-3">
    <div class="row">
        <div class="col">
           
        </div>
    </div>
</div>

@code {

    private IVehicle currentVehicle;

    private string errorMessage = string.Empty;
    private bool showInstructions = false;
    private bool isProcessing = false;
    private List<IBooking> bookings = new();
    private List<IPerson> customers = new();
    private List<IVehicle> vehicles = new();
    private IPerson newCustomer = new Customer();
    private IVehicle newCar = new Car();
    private IVehicle newMC = new Motorcycle();
    private string typeOfVehicle = string.Empty;
    private string selectedCustomer = string.Empty;

    protected override void OnInitialized()
    {
        bookings = services.Get<IBooking>().ToList();
        customers = services.Get<IPerson>().ToList();
        vehicles = services.Get<IVehicle>().ToList();
        currentVehicle = vehicles.FirstOrDefault();

    }

    private void SetCurrentVehicle(IVehicle vehicle)
    {
        currentVehicle = vehicle;
    }

    private void ToggleInstructions() => showInstructions = !showInstructions;

    private void ErrorMessage(string info) => errorMessage = $"{info}";

    private void CloseAlert() => errorMessage = string.Empty;

    private void AddNewVehicle()
    {
        try
        {
            if (typeOfVehicle == "Car" && !Regex.IsMatch(newCar.RegNo, @"^[A-Z]{3}\d{3}$"))
            {
                ErrorMessage("[REG. NO.] - Accepted format: 'ABC123'");
                return;
            }
            if (typeOfVehicle == "Car" && string.IsNullOrEmpty(newCar.Make))
            {
                ErrorMessage("[MAKE] - Missing input");
                return;
            }
            if (typeOfVehicle == "Car" && (newCar.Odometer < 0 || newCar.Odometer == null))
            {
                ErrorMessage("[ODOMETER] - Accepted format: Integer");
                return;
            }
            if (typeOfVehicle == "Car" && newCar is ICar car && (car.Doors < 0 || car.Doors == null))
            {
                ErrorMessage("[NO. OF DOORS] - Accepted format: Integer");
                return;
            }
            if (typeOfVehicle == "Car" && (newCar.CostKm < 0 || newCar.CostKm == null))
            {
                ErrorMessage("[COST/KM] - Accepted format: Decimal");
                return;
            }
            if (typeOfVehicle == "Motorcycle" && !Regex.IsMatch(newMC.RegNo, @"^[A-Z]{3}\d{3}$"))
            {
                ErrorMessage("[REG. NO.] - Accepted format: 'ABC123'");
                return;
            }
            if (typeOfVehicle == "Motorcycle" && string.IsNullOrEmpty(newMC.Make))
            {
                ErrorMessage("[MAKE] - Missing input");
                return;
            }
            if (typeOfVehicle == "Motorcycle" && (newMC.Odometer < 0 || newMC.Odometer == null))
            {
                ErrorMessage("[ODOMETER] - Accepted format: Integer");
                return;
            }
            if (typeOfVehicle == "Motorcycle" && newMC is IMotorcycle mc && (mc.Seats < 0 || mc.Seats == null))
            {
                ErrorMessage("[NO. OF SEATS] - Accepted format: Integer");
                return;
            }
            if (typeOfVehicle == "Motorcycle" && (newMC.CostKm < 0 || newMC.CostKm == null))
            {
                ErrorMessage("[COST/KM] - Accepted format: Decimal");
                return;
            }

            if (typeOfVehicle == "Car")
            {
                services.Add(newCar);
                newCar = new Car();
            }
            else if (typeOfVehicle == "Motorcycle")
            {
                services.Add(newMC);
                newMC = new Motorcycle();
            }

            vehicles = services.Get<IVehicle>().ToList();
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private void AddNewCustomer()
    {
        try
        {
            if (string.IsNullOrEmpty(newCustomer.SSN) || !Regex.IsMatch(newCustomer.SSN, @"^\d{6}-\d{4}$"))
            {
                ErrorMessage("[SOCIAL SEC. NO.] Accepted format: '012345-6789'");
                return;
            }
            if (string.IsNullOrEmpty(newCustomer.FirstName) || !Regex.IsMatch(newCustomer.FirstName, @"^[a-zA-Z-' ]+$"))
            {
                ErrorMessage("[FIRST NAME] - Letters, hyphens, spaces, or apostrophes only");
                return;
            }
            if (string.IsNullOrEmpty(newCustomer.LastName) || !Regex.IsMatch(newCustomer.LastName, @"^[a-zA-Z-' ]+$"))
            {
                ErrorMessage("[LAST NAME] - Letters, hyphens, spaces, or apostrophes only");
                return;
            }

            services.Add(newCustomer);
            newCustomer = new Customer();

            customers = services.Get<IPerson>().ToList();
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task RentVehicleAsync(IVehicle v)
    {
        isProcessing = true;
        try
        {
            await Task.Delay(5000);
            services.RentVehicle(v, selectedCustomer, customers);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            bookings = services.Get<IBooking>().ToList();
            vehicles = services.Get<IVehicle>().ToList();
            selectedCustomer = string.Empty;
        }
    }

    private void ReturnVehicle(IBooking b)
    {
        try
        {
            services.ReturnVehicle(b);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
}

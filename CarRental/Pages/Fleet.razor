@page "/fleet"
@using CarRentalLogic.Classes;
@using CarRentalCommon.Classes
@using CarRentalCommon.Interfaces;
@using CarRentalCommon.Enums;
@using System.Linq;
@using System.Text.RegularExpressions;
@inject Services services

<PageTitle>Fleet</PageTitle>
<Alert Message="@errorMessage" OnClose="CloseAlert" />

<div class="container-fluid p-5">
    <div class="row">
        <div class="col">
            <h2 class="fs-1 text-uppercase">Fleet</h2>
            <h4 class="py-5">Welcome to Mr C's Classic Cars Collection</h4>
        </div>
    </div>
</div>

<div class="container-fluid p-5">
    <div class="row">
        <h3 class="text-center mb-0"><img src="images/logo-white.png" class="w-25" /></h3>
        <h3 class="text-center text-muted fst-italic fw-light">A Collection of Classics</h3>
    </div>
    <div class="row border-bottom">
        <!-- Vehicle Information Column -->
        <div class="col-3 text-end">
            <h4 class="fw-bold border-bottom mt-5">Vehicle Details</h4>
            <p class="my-2"><strong>Registration Number:</strong> @currentVehicle.RegNo</p>
            <p class="my-2"><strong>Type:</strong> @currentVehicle.VehicleType</p>
            <p class="my-2"><strong>Make:</strong> @currentVehicle.Make</p>
            <h4 class="fw-bold border-bottom mt-5">Rental Information</h4>
            <p class="my-2"><strong>Odometer:</strong> @currentVehicle.Odometer km</p>
            <p class="my-2">
                @if (currentVehicle is ICar car)
                {
                    <span><strong>Doors:</strong> @car.Doors</span>
                }
                else if (currentVehicle is IMotorcycle mc)
                {
                    <span><strong>Seats:</strong> @mc.Seats</span>
                }
            </p>
            <p class="my-2"><strong>Cost per km:</strong> @currentVehicle.CostKm €</p>
            <p class="my-2"><strong>Cost per day:</strong> @currentVehicle.CostDay €</p>
            <p class="my-2">
                <strong>Status:</strong>
                <span class="@((services.BookingStatus(currentVehicle.RegNo) == VehicleStatus.Available) ? "text-success" : "text-danger")">
                    @(services.BookingStatus(currentVehicle.RegNo) == VehicleStatus.Available ? "Available" : "Booked")
                </span>
            </p>
        </div>

        <!-- Vehicle Image Column -->
        <div class="col-6 text-center">
            <img src="@($"/images/vehicles/{currentVehicle.RegNo}.png")" alt="Image of @currentVehicle.RegNo" class="img-fluid w-100" />
            <h3 class="fw-bold">@currentVehicle.Make</h3>
            <h6 class="text-muted">@currentVehicle.Year</h6>
        </div>

        <!-- Vehicle Selection Column -->
        <div class="col-3">
            <h4 class="fw-bold mt-5 border-bottom">Select a Model</h4>
            <div class="font-monospace">
                @foreach (var vehicle in vehicles)
                {
                    <button type="button"
                            class="btn btn-sm @(vehicle.RegNo == currentVehicle.RegNo ? "btn-dark" : "btn-outline-secondary border-0") d-flex align-items-center  w-100 my-3"
                    @onclick="() => SetCurrentVehicle(vehicle)">
                        <span class="@((services.BookingStatus(vehicle.RegNo) == VehicleStatus.Available) ? "bi-circle-fill text-success" : "bi-circle-fill text-danger") me-2">
                        </span>
                        @vehicle.Make
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {

    private IVehicle currentVehicle;

    private string errorMessage = string.Empty;
    private bool showInstructions = false;
    private bool isProcessing = false;
    private List<IBooking> bookings = new();
    private List<IPerson> customers = new();
    private List<IVehicle> vehicles = new();
    private IPerson newCustomer = new Customer();
    private IVehicle newCar = new Car();
    private IVehicle newMC = new Motorcycle();
    private string typeOfVehicle = string.Empty;
    private string selectedCustomer = string.Empty;

    protected override void OnInitialized()
    {
        bookings = services.Get<IBooking>().ToList();
        customers = services.Get<IPerson>().ToList();
        vehicles = services.Get<IVehicle>().ToList();
        currentVehicle = vehicles.FirstOrDefault();

    }

    private void SetCurrentVehicle(IVehicle vehicle)
    {
        currentVehicle = vehicle;
    }

    private void ToggleInstructions() => showInstructions = !showInstructions;

    private void ErrorMessage(string info) => errorMessage = $"{info}";

    private void CloseAlert() => errorMessage = string.Empty;

    private void AddNewVehicle()
    {
        try
        {
            if (typeOfVehicle == "Car" && !Regex.IsMatch(newCar.RegNo, @"^[A-Z]{3}\d{3}$"))
            {
                ErrorMessage("[REG. NO.] - Accepted format: 'ABC123'");
                return;
            }
            if (typeOfVehicle == "Car" && string.IsNullOrEmpty(newCar.Make))
            {
                ErrorMessage("[MAKE] - Missing input");
                return;
            }
            if (typeOfVehicle == "Car" && (newCar.Odometer < 0 || newCar.Odometer == null))
            {
                ErrorMessage("[ODOMETER] - Accepted format: Integer");
                return;
            }
            if (typeOfVehicle == "Car" && newCar is ICar car && (car.Doors < 0 || car.Doors == null))
            {
                ErrorMessage("[NO. OF DOORS] - Accepted format: Integer");
                return;
            }
            if (typeOfVehicle == "Car" && (newCar.CostKm < 0 || newCar.CostKm == null))
            {
                ErrorMessage("[COST/KM] - Accepted format: Decimal");
                return;
            }
            if (typeOfVehicle == "Motorcycle" && !Regex.IsMatch(newMC.RegNo, @"^[A-Z]{3}\d{3}$"))
            {
                ErrorMessage("[REG. NO.] - Accepted format: 'ABC123'");
                return;
            }
            if (typeOfVehicle == "Motorcycle" && string.IsNullOrEmpty(newMC.Make))
            {
                ErrorMessage("[MAKE] - Missing input");
                return;
            }
            if (typeOfVehicle == "Motorcycle" && (newMC.Odometer < 0 || newMC.Odometer == null))
            {
                ErrorMessage("[ODOMETER] - Accepted format: Integer");
                return;
            }
            if (typeOfVehicle == "Motorcycle" && newMC is IMotorcycle mc && (mc.Seats < 0 || mc.Seats == null))
            {
                ErrorMessage("[NO. OF SEATS] - Accepted format: Integer");
                return;
            }
            if (typeOfVehicle == "Motorcycle" && (newMC.CostKm < 0 || newMC.CostKm == null))
            {
                ErrorMessage("[COST/KM] - Accepted format: Decimal");
                return;
            }

            if (typeOfVehicle == "Car")
            {
                services.Add(newCar);
                newCar = new Car();
            }
            else if (typeOfVehicle == "Motorcycle")
            {
                services.Add(newMC);
                newMC = new Motorcycle();
            }

            vehicles = services.Get<IVehicle>().ToList();
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private void AddNewCustomer()
    {
        try
        {
            if (string.IsNullOrEmpty(newCustomer.SSN) || !Regex.IsMatch(newCustomer.SSN, @"^\d{6}-\d{4}$"))
            {
                ErrorMessage("[SOCIAL SEC. NO.] Accepted format: '012345-6789'");
                return;
            }
            if (string.IsNullOrEmpty(newCustomer.FirstName) || !Regex.IsMatch(newCustomer.FirstName, @"^[a-zA-Z-' ]+$"))
            {
                ErrorMessage("[FIRST NAME] - Letters, hyphens, spaces, or apostrophes only");
                return;
            }
            if (string.IsNullOrEmpty(newCustomer.LastName) || !Regex.IsMatch(newCustomer.LastName, @"^[a-zA-Z-' ]+$"))
            {
                ErrorMessage("[LAST NAME] - Letters, hyphens, spaces, or apostrophes only");
                return;
            }

            services.Add(newCustomer);
            newCustomer = new Customer();

            customers = services.Get<IPerson>().ToList();
            errorMessage = string.Empty;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task RentVehicleAsync(IVehicle v)
    {
        isProcessing = true;
        try
        {
            await Task.Delay(5000);
            services.RentVehicle(v, selectedCustomer, customers);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            bookings = services.Get<IBooking>().ToList();
            vehicles = services.Get<IVehicle>().ToList();
            selectedCustomer = string.Empty;
        }
    }

    private void ReturnVehicle(IBooking b)
    {
        try
        {
            services.ReturnVehicle(b);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }
}

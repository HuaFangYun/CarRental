@page "/"
@using car_rental_business_logic.Classes;
@using car_rental_common.Interfaces;
@using car_rental_common.Enums;
@using System.Linq;
@inject BookingProcessor BookingService

<PageTitle>Index</PageTitle>

<h3>Bookings</h3>
<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col" colspan="8" class="text-danger fw-light">- Instructions -</th>
        </tr>
        <tr>
            <th scope="col" colspan="8" class="text-danger fw-light">By default, the booking dates are set to today's date. However, these dates are fully customizable to match the customer's requirements.</th>
        </tr>
        <tr>
            <th scope="col" colspan="8" class="text-danger fw-light">A booking remains in the "Open" status until a value is entered for "Odometer Reading After Driving (km)". Once this value is provided, the "Total Cost" is automatically calculated based on both the number of days the vehicle is rented and the distance driven by the renter. Ensure you adjust the dates as needed to best serve your customers.</th>
        </tr>
        <tr>
            <th scope="col" colspan="8" class="text-danger fw-light">For specific price information, please refer to the 'Vehicle' table below.</th>
        </tr>
        <tr>
            <th scope="col">RegNo</th>
            <th scope="col">Customer</th>
            <th scope="col">Odo. before driving (km)</th>
            <th scope="col">Odo. after driving (km)</th>
            <th scope="col">Rented Date</th>
            <th scope="col">Returned</th>
            <th scope="col">Status</th>
            <th scope="col">Total cost</th>
        </tr>
    </thead>
    <tbody>
        @foreach (IBooking booking in bookings)
        {
            <tr>
                <td>@booking.Vehicle.RegNo</td>
                <td>@booking.Customer.FirstName @booking.Customer.LastName</td>
                <td>@booking.OdometerBeforeDriving</td>
                <td><input @bind="booking.OdometerAfterDriving" placeholder="Enter value upon return" /></td>
                <td><input type="date" @bind="booking.StartDate" /></td>
                <td><input type="date" @bind="booking.ReturnDate" placeholder="yyyy-MM-dd" /></td>
                <td class="@(BookingService.GetBookingStatus(booking) == "Closed" ? "text-success" : "text-warning")">
                    @BookingService.GetBookingStatus(booking)
                </td>
                <td>@BookingService.CalculateCostForBooking(booking)</td>
            </tr>
        }
    </tbody>
</table>

<h3>Vehicles</h3>
<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">Reg No.</th>
            <th scope="col">Make</th>
            <th scope="col">Odometer</th>
            <th scope="col">Cost/Km</th>
            <th scope="col">Vehicle type</th>
            <th scope="col">Cost/Day</th>
            <th scope="col">Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (IVehicle vehicle in vehicles)
        {
            var vehicleStatus = BookingService.IsVehicleBooked(vehicle.RegNo);

            <tr>
                <td>@vehicle.RegNo</td>
                <td>@vehicle.Make</td>
                <td>@vehicle.Odometer</td>
                <td>@vehicle.CostKm</td>
                <td>@vehicle.VehicleType</td>
                <td>@vehicle.CostDay</td>
                <td class="@(vehicleStatus == VehicleStatuses.Available ? "text-success" : "text-warning")">
                    @vehicleStatus
                </td>

            </tr>
        }
    </tbody>
</table>


<h3>Customers</h3>
<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">Social Security No.</th>
            <th scope="col">First name</th>
            <th scope="col">Last name</th>
        </tr>
    </thead>
    <tbody>
        @foreach (ICustomer customer in customers)
        {
            <tr>
                <td>@customer.SSN</td>
                <td>@customer.FirstName</td>
                <td>@customer.LastName</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<IBooking> bookings;
    private List<ICustomer> customers;
    private List<IVehicle> vehicles;

    protected override void OnInitialized()
    {
        bookings = BookingService.GetBookings().ToList();
        customers = BookingService.GetCustomers().ToList();
        vehicles = BookingService.GetVehicles().ToList();
    }
}